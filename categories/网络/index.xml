<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>网络 on star‘s Blog</title>
        <link>https://example.com/categories/%E7%BD%91%E7%BB%9C/</link>
        <description>Recent content in 网络 on star‘s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Sun, 24 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>frp socks5代理应用场景</title>
        <link>https://example.com/p/frp-socks5%E4%BB%A3%E7%90%86%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
        <pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/frp-socks5%E4%BB%A3%E7%90%86%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
        <description>&lt;p&gt;最近工作中遇到一个问题，在一个vpc下面有两台虚拟机，其中一台机器绑定了eip可以访问互联网，另一台没有绑，没有公网的机器想通过绑定eip的机器来访问公网，我采用了frp中的sock5代理来实现这个需求，首先分别介绍一下frp和socks5代理协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/socks5-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1frp简介&#34;&gt;1、frp简介
&lt;/h3&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(25, 27, 31);&#34;&gt;frp 是一个可用于内网穿透的高性能的反向代理应用，支持TCP、UDP协议，为HTTP和HTTPS应用协议提供了额外的能力，且尝试性支持了点对点穿透。frp 采用go语言开发。更多的人使用 frp 是为了进行反向代理，满足通过公网服务器访问处于内网的服务，如访问内网web服务，远程ssh内网服务器，远程控制内网NAS等，实现类似花生壳、ngrok等功能。而对于内网渗透来讲，这种功能恰好能够满足我们进行内网渗透的流量转发。FRP最大的一个特点是使用&lt;/font&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhida.zhihu.com/search?content_id=177765655&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=SOCKS%E4%BB%A3%E7%90%86&amp;amp;zhida_source=entity&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;font style=&#34;color:rgb(9, 64, 142);&#34;&gt;SOCKS代理&lt;/font&gt;&lt;/a&gt;&lt;font style=&#34;color:rgb(25, 27, 31);&#34;&gt;，而SOCKS是加密通信的，类似于做了一个加密的隧道，可以把外网的流量，通过加密隧道穿透到内网。效果有些类似于VPN。&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;2socks介绍&#34;&gt;2、&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;SOCKS介绍&lt;/font&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;SOCKS&lt;/font&gt;&lt;/strong&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;全称是SOCKet Secure，是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。在OSI模型中，SOCKS是会话层的协议，位于表示层与传输层之间，最新协议是&lt;/font&gt;&lt;strong&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;SOCKS5&lt;/font&gt;&lt;/strong&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;SOCKS5原理&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;①首先客户端向代理服务器发出请求信息，用以协商版本和认证方法。随后代理服务器应答，将选择的方法发送给客户端。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;②客户端和代理服务器进入由选定认证方法所决定的子协商过程，子协商过程结束后，客户端发送请求信息，其中包含目标服务器的IP地址和端口。代理服务器验证客户端身份，通过后会与目标服务器连接，目标服务器经过代理服务器向客户端返回状态响应。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;③连接完成后，代理服务器开始作为中转站中转数据。&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;3操作步骤&#34;&gt;&lt;font style=&#34;color:rgb(35, 38, 59);background-color:rgba(255, 255, 255, 0.9);&#34;&gt;3、操作步骤&lt;/font&gt;
&lt;/h3&gt;&lt;p&gt;1、在vm2 上下载frp&lt;/p&gt;
&lt;p&gt;访问网址&lt;a class=&#34;link&#34; href=&#34;https://github.com/fatedier/frp/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/fatedier/frp/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据自己的操作系统下载对应的版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/socks5-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;2、然后进行解压，解压之后下面有几个文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/socks5-3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;3、编辑frpc.toml和frps.toml。&lt;/p&gt;
&lt;p&gt;frpc.toml&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/socks5-4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;frps.toml&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/socks5-5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;4、然后分别启动frps和frpc&lt;/p&gt;
&lt;p&gt;./frps -c frps.toml&lt;/p&gt;
&lt;p&gt;./frpc -c frpc.toml&lt;/p&gt;
&lt;p&gt;5、然后vm1便可以通过访问vm2ip:1080来访问到公网&lt;/p&gt;
</description>
        </item>
        <item>
        <title>组播igmpv2和igmpv3区别</title>
        <link>https://example.com/p/%E7%BB%84%E6%92%ADigmpv2%E5%92%8Cigmpv3%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/%E7%BB%84%E6%92%ADigmpv2%E5%92%8Cigmpv3%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;h2 id=&#34;igmpv2-vs-igmpv3你的组播网络该升级了吗&#34;&gt;IGMPv2 vs IGMPv3：你的组播网络该升级了吗？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;场景：&lt;/strong&gt; 办公室里，小王正对着卡成PPT的直播培训抓狂，隔壁组的4K监控大屏却流畅无比。网管老张神秘一笑：“想知道秘密？关键在于组播协议的选择！”&lt;/p&gt;
&lt;p&gt;没错，当海量设备需要&lt;strong&gt;同时接收同一份数据&lt;/strong&gt;（比如视频流、在线会议），单播（点对点）广播（无差别轰炸）都会拖垮网络。&lt;strong&gt;组播（Multicast）&lt;/strong&gt; 才是高效解决方案，而 &lt;strong&gt;IGMP（Internet Group Management Protocol）&lt;/strong&gt; 就是设备与路由器间沟通“谁想看什么频道”的核心语言。今天我们就来拆解最常用的两个版本：&lt;strong&gt;IGMPv2 和 IGMPv3&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;-核心任务举手报名我想看这个频道&#34;&gt;📌 核心任务：举手报名“我想看这个频道！”
&lt;/h3&gt;&lt;p&gt;无论是v2还是v3，核心任务一致：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设备（成员）&lt;/strong&gt; 告诉本地路由器：“我要加入XX组播组（频道）！”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由器&lt;/strong&gt; 负责将组播流转发给所有“报名”的设备；&lt;/li&gt;
&lt;li&gt;设备不想看了，通知路由器：“我退出了！”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;区别在于“报名”和“退出”的精细程度和效率！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;igmpv2基础版大锅饭频道订阅&#34;&gt;IGMPv2：基础版“大锅饭”频道订阅
&lt;/h3&gt;&lt;p&gt;想象一个老式收音机📻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加入频道：&lt;/strong&gt; 你只能调到某个频率（组播组地址，如&lt;code&gt;239.1.2.3&lt;/code&gt;）。只要调到这个频率，就能收到&lt;strong&gt;所有&lt;/strong&gt;在这个频率上播放的节目（源），无法选择具体电台。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离开频道：&lt;/strong&gt; 直接关掉收音机（发送离开报文）。路由器会快速确认是否还有人听这个频道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IGMPv2 关键特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ASM (Any-Source Multicast) 模型：&lt;/strong&gt; 只关心&lt;strong&gt;组地址&lt;/strong&gt;。加入&lt;code&gt;239.1.2.3&lt;/code&gt;，意味着接收&lt;strong&gt;任何源&lt;/strong&gt;发送到这个地址的流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离开机制 (Leave Message)：&lt;/strong&gt; 成员离开时&lt;strong&gt;主动&lt;/strong&gt;发送离开报文，路由器触发特定组查询（Group-Specific Query）快速确认是否还有成员。&lt;strong&gt;显著减少了离开延迟！&lt;/strong&gt; (相比v1靠超时判断)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询器选举 (Querier Election)：&lt;/strong&gt; 同一网段多个路由器时，通过比较IP地址&lt;strong&gt;自动选举&lt;/strong&gt;一个负责发送查询报文（谁是老大谁来问）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员报告抑制：&lt;/strong&gt; 多个成员想加入同一组时，后听到报告的成员会抑制自己的报告，减少网络流量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;❌&lt;/strong&gt;** IGMPv2 痛点：**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无法选择节目源！&lt;/strong&gt; 加入&lt;code&gt;239.1.2.3&lt;/code&gt;，会收到&lt;strong&gt;所有&lt;/strong&gt;发送到此地址的流量，即使是恶意流量或低质量源，造成带宽浪费和安全风险（源泛滥）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-igmpv3升级版精准点播源过滤&#34;&gt;🚀 IGMPv3：升级版“精准点播”源过滤
&lt;/h3&gt;&lt;p&gt;想象一个智能电视盒子📺：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加入频道：&lt;/strong&gt; 你可以选择&lt;code&gt;239.1.2.3&lt;/code&gt;这个“频道”，并且&lt;strong&gt;精确指定&lt;/strong&gt;只接收来自“央视”(源S1)的节目，或者排除“某个地方台”(源S2)的节目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离开/修改：&lt;/strong&gt; 可以随时修改你的“频道订阅清单”（源列表）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IGMPv3 核心飞跃：SSM (Source-Specific Multicast) 模型支持！&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;源过滤 (Source Filtering)：&lt;/strong&gt; 成员报告报文中包含&lt;strong&gt;组地址 + 源地址列表&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;INCLUDE 模式：&lt;/strong&gt; 只接收&lt;strong&gt;列表内&lt;/strong&gt;指定源发送到该组的流量。&lt;code&gt;(G, INCLUDE, {S1, S2})&lt;/code&gt; -&amp;gt; 只看S1和S2发的G组内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EXCLUDE 模式：&lt;/strong&gt; 接收&lt;strong&gt;列表外&lt;/strong&gt;所有源发送到该组的流量。&lt;code&gt;(G, EXCLUDE, {S3})&lt;/code&gt; -&amp;gt; 接收除了S3以外任何源发的G组内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更灵活的状态维护：&lt;/strong&gt; 主机为每个组维护一个“源过滤”状态，可随时发送报告更新（加入新源、移除旧源、改变模式）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性：&lt;/strong&gt; 通常兼容IGMPv2成员（路由器工作在v3时，会以ASM方式处理v2报告）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报告聚合：&lt;/strong&gt; 更复杂的报告机制，但设计上仍考虑减少报文数量。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-igmpv2-与-igmpv3-核心差异速查表&#34;&gt;📊 IGMPv2 与 IGMPv3 核心差异速查表
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;特性&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;IGMPv2&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;IGMPv3&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;优势对比&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;模型&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ASM (Any-Source Multicast)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;ASM + SSM (Source-Specific)&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;v3支持精确指定/排除源！&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;加入粒度&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;仅组地址 (&lt;code&gt;G&lt;/code&gt;)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;组地址 + 源地址列表 (&lt;/strong&gt;&lt;code&gt;G, S&lt;/code&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;v3精细控制源，避免无效流量&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;过滤模式&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;无 (隐含接收所有源)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;INCLUDE / EXCLUDE&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;v3提供两种灵活的订阅方式&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;离开机制&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;有 (发送离开报文)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;有 (通过发送更新模式的报告实现)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;两者离开效率都远高于v1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;查询器选举&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;有 (基于IP地址)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;有 (机制相同)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;相同&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;主要优势&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;实现简单，广泛支持&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;安全性高，带宽利用率高，支持SSM应用&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;v3是现代组播应用的基石&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;典型应用&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;早期视频广播、基础组播应用&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;IPTV (频道切换)、视频会议源选择、安全组播、金融行情&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;v3满足高性能、高安全需求&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-为什么你需要关心igmpv3&#34;&gt;🧠 为什么你需要关心IGMPv3？
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;省带宽、提效率：&lt;/strong&gt; 只接收需要的源，避免垃圾组播流浪费宝贵带宽，尤其在视频等高流量场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强安全性：&lt;/strong&gt; 天然抵御来自未授权源的组播洪泛攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支撑现代应用：&lt;/strong&gt; IPTV换台快、大型视频会议选择发言人流畅、金融行情精确分发&amp;hellip;都依赖SSM，而SSM的核心就是IGMPv3！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未来趋势：&lt;/strong&gt; 随着万兆网络普及和组播应用深化，IGMPv3已成为主流和推荐配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-总结升级你的组播沟通语言&#34;&gt;💡 总结：升级你的组播“沟通语言”
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IGMPv2 是基础：&lt;/strong&gt; 解决了“我要看G频道”和“我不看了”的问题，效率比v1高，但&lt;strong&gt;无法选择节目源&lt;/strong&gt;，如同吃大锅饭。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IGMPv3 是飞跃：&lt;/strong&gt; 在v2基础上，增加了强大的&lt;strong&gt;源过滤能力&lt;/strong&gt;（INCLUDE/EXCLUDE），实现了“我要看G频道，但&lt;strong&gt;只要/不要&lt;/strong&gt;S1/S2&amp;hellip;提供的节目”的精准控制。这是&lt;strong&gt;高效、安全、现代组播应用的基石&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;📣&lt;/strong&gt;** 行动建议：** 如果你的网络中存在视频分发、实时通信、大规模数据推送等组播应用，尤其是对带宽和安全性有要求，&lt;strong&gt;强烈建议部署IGMPv3&lt;/strong&gt;！检查你的路由器、交换机和终端操作系统是否支持并启用了它。别让过时的协议，成为网络流畅体验的瓶颈！&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>组播igmp协议详解</title>
        <link>https://example.com/p/%E7%BB%84%E6%92%ADigmp%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/%E7%BB%84%E6%92%ADigmp%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;p&gt;组播 IGMP 协议详解&lt;/p&gt;
&lt;p&gt;在日常的网络传输中，我们最常听到的就是 &lt;strong&gt;单播（Unicast）&lt;/strong&gt; 和 &lt;strong&gt;广播（Broadcast）&lt;/strong&gt;。单播就像你给朋友单独发一条微信，只发给他一个人；广播则像在微信群里吼一嗓子，所有人都能看到。&lt;br&gt;
那 &lt;strong&gt;组播（Multicast）&lt;/strong&gt; 呢？它更像是&lt;strong&gt;建立一个兴趣小组，只有加入这个小组的人才能收到你发的内容&lt;/strong&gt;。而 IGMP（Internet Group Management Protocol）就是负责“管理小组成员”的协议。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一igmp-是什么&#34;&gt;一、IGMP 是什么？
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;IGMP（Internet Group Management Protocol）&lt;/strong&gt; 是 IPv4 网络中用于&lt;strong&gt;管理组播组成员关系&lt;/strong&gt;的协议。&lt;br&gt;
简单来说，它帮助网络设备（尤其是路由器）知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些主机想加入某个组播组&lt;/li&gt;
&lt;li&gt;哪些主机不再需要组播数据&lt;/li&gt;
&lt;li&gt;当前有哪些活跃的组播成员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它工作在 &lt;strong&gt;网络层&lt;/strong&gt;，但&lt;strong&gt;运行在主机和相邻路由器之间&lt;/strong&gt;，并不会跨越多个路由器去传播。&lt;/p&gt;
&lt;h3 id=&#34;二组播的实际例子&#34;&gt;二、组播的实际例子
&lt;/h3&gt;&lt;p&gt;想象一下，你所在的公司要直播一场全员大会。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果用单播，每个员工的电脑都要跟服务器建立一条独立的连接，这会让服务器压力山大。&lt;/li&gt;
&lt;li&gt;如果用广播，虽然省事，但不仅公司员工，连打印机、考勤机这些设备也会被迫收到直播数据（没用还浪费带宽）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用组播就完美了&lt;/strong&gt;：只有主动“加入直播组”的员工电脑才能收到直播视频数据，其他设备完全不受影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个“加入直播组”的过程，就是通过 &lt;strong&gt;IGMP 协议&lt;/strong&gt; 来实现的。&lt;/p&gt;
&lt;h3 id=&#34;三igmp-的工作机制&#34;&gt;三、IGMP 的工作机制
&lt;/h3&gt;&lt;p&gt;IGMP 的运作过程，核心就是&lt;strong&gt;三种报文&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Membership Query（成员查询）&lt;/strong&gt;&lt;br&gt;
由路由器发出，询问“大家谁还在某个组播组里？”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Membership Report（成员报告）&lt;/strong&gt;&lt;br&gt;
由主机发出，表示“我还在某个组里，请继续给我发数据。”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Leave Group（离开组）&lt;/strong&gt;&lt;br&gt;
由主机发出，表示“我不看这个组播数据了，可以停了。”&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四igmp-的版本演进&#34;&gt;四、IGMP 的版本演进
&lt;/h3&gt;&lt;p&gt;IGMP 目前有三个版本，每一代都比上一代更智能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;IGMPv1&lt;/strong&gt;（最基础）
&lt;ul&gt;
&lt;li&gt;主机可以加入组播组，但没有“离开组”的机制，需要路由器超时后才会停止发送数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IGMPv2&lt;/strong&gt;（更高效）
&lt;ul&gt;
&lt;li&gt;增加了 &lt;code&gt;Leave Group&lt;/code&gt; 报文，可以主动告诉路由器自己不再需要数据。&lt;/li&gt;
&lt;li&gt;支持指定组的查询，提高了管理效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IGMPv3&lt;/strong&gt;（更灵活）
&lt;ul&gt;
&lt;li&gt;支持 &lt;strong&gt;源特定组播（SSM）&lt;/strong&gt;，即只接收来自特定源 IP 的组播数据，安全性和精准度更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;五用例场景再深入一点&#34;&gt;五、用例场景再深入一点
&lt;/h3&gt;&lt;p&gt;我们回到公司的直播例子。&lt;/p&gt;
&lt;p&gt;假设公司 IT 部署了组播路由器，并分配了一个组播地址 &lt;strong&gt;239.1.1.1&lt;/strong&gt; 作为“全员大会直播”频道：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当你打开直播软件时，软件会通过 &lt;strong&gt;IGMP Report&lt;/strong&gt; 告诉路由器：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;“我要加入 239.1.1.1 组，请把数据发给我。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;路由器记录下来，并把直播视频数据转发到你的电脑。&lt;/li&gt;
&lt;li&gt;当直播结束，你关闭软件，软件会发一个 &lt;strong&gt;Leave Group&lt;/strong&gt; 给路由器：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;“我退出 239.1.1.1 组了，可以停发给我。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;如果有很多人退出，路由器可能会发 &lt;strong&gt;Membership Query&lt;/strong&gt; 确认是否还有人需要这个直播数据，如果没人了，就停止该组播数据的转发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样一来，&lt;strong&gt;服务器只需要发一份直播流到路由器，路由器再复制给组内成员&lt;/strong&gt;，比单播节省了大量带宽，也避免广播的无差别轰炸。&lt;/p&gt;
&lt;h3 id=&#34;六igmp-与其他协议的关系&#34;&gt;六、IGMP 与其他协议的关系
&lt;/h3&gt;&lt;p&gt;IGMP 只是组播管理的**“前台登记员”**，真正负责组播转发的，是像 &lt;strong&gt;PIM（Protocol Independent Multicast）&lt;/strong&gt; 这样的路由协议。&lt;br&gt;
可以这么理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IGMP&lt;/strong&gt;：负责“谁在看这个频道”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PIM&lt;/strong&gt;：负责“把频道信号送到这些人手里”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者配合，才能让组播数据准确高效地送达。&lt;/p&gt;
&lt;h3 id=&#34;七总结&#34;&gt;七、总结
&lt;/h3&gt;&lt;p&gt;IGMP 协议虽然听起来是个小角色，但在组播体系中它就像一个&lt;strong&gt;观众登记系统&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它让路由器知道谁需要组播数据，谁已经离开&lt;/li&gt;
&lt;li&gt;它帮助节省带宽、减少无效数据传输&lt;/li&gt;
&lt;li&gt;它的版本升级让组播管理更加高效和安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下一次你在公司看直播、在局域网玩联机游戏、或者家里 IPTV 看电视时，很可能后台就有 IGMP 在悄悄帮你管理数据流。&lt;br&gt;
所以，虽然它的存在感不高，但没有它，组播的世界就会变得一团糟。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>OSPF协议详解</title>
        <link>https://example.com/p/ospf%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/ospf%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;p&gt;好的，我们来详细解析一下 &lt;strong&gt;OSPF（Open Shortest Path First）&lt;/strong&gt; 协议。它是网络协议栈中非常重要的&lt;strong&gt;内部网关协议（IGP）&lt;/strong&gt;，用于在&lt;strong&gt;单一自治系统（AS）&lt;/strong&gt; 内部的路由器之间动态地交换路由信息并计算最优路径。&lt;/p&gt;
&lt;h2 id=&#34;核心定位与目标&#34;&gt;核心定位与目标
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型：&lt;/strong&gt; 链路状态路由协议（Link-State Routing Protocol）。这是理解 OSPF 的关键。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标：&lt;/strong&gt; 让 AS 内部的所有路由器都拥有一张&lt;strong&gt;完全相同&lt;/strong&gt;的、描述整个 AS 网络拓扑结构的“地图”（链路状态数据库 - LSDB），并基于此地图独立地使用 &lt;strong&gt;SPF（Shortest Path First，即 Dijkstra）算法&lt;/strong&gt; 计算出到达 AS 内所有网络的最短（最优）路径树，最终形成路由表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对比 RIP：&lt;/strong&gt; 相比距离矢量协议（如 RIP），OSPF 收敛速度快得多（网络变化时路由信息快速稳定），支持大型网络（通过区域划分），无路由环路（由 SPF 算法保证），支持 VLSM 和 CIDR，提供更丰富的路由度量（Cost）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关键特性和概念&#34;&gt;关键特性和概念
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链路状态（Link-State）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器不再像 RIP 那样只告诉邻居“我到某个网络的距离是多少”，而是主动&lt;strong&gt;描述自己直连的网络状态&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这个描述信息称为 &lt;strong&gt;LSA（Link State Advertisement - 链路状态通告）&lt;/strong&gt;。它包含的信息如：该路由器连接了哪些网络、邻居路由器是谁、连接到这些链路/邻居的“代价（Cost）”是多少。&lt;/li&gt;
&lt;li&gt;路由器将生成的 LSA &lt;strong&gt;泛洪（Flooding）&lt;/strong&gt; 给 OSPF 域内的&lt;strong&gt;所有其他路由器&lt;/strong&gt;（在区域限制内）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链路状态数据库（LSDB - Link State Database）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器收到域内所有其他路由器发来的 LSA 后，会把这些 LSA 存储在自己的 LSDB 中。&lt;/li&gt;
&lt;li&gt;理想情况下，&lt;strong&gt;同一个区域（Area）内所有路由器的 LSDB 内容是完全一致的&lt;/strong&gt;。这是路由器能独立、一致地计算最短路径树的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPF（Dijkstra）算法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器都&lt;strong&gt;独立&lt;/strong&gt;地以自己的视角（作为根）运行 SPF 算法。&lt;/li&gt;
&lt;li&gt;算法基于 LSDB 中存储的完整拓扑信息（节点=路由器/网络，边=链路，边权=Cost），计算出一棵到达所有目标网络的最短路径树（SPT - Shortest Path Tree）。&lt;/li&gt;
&lt;li&gt;这棵树上的路径就是该路由器认为的到达各网络的最优无环路径。&lt;/li&gt;
&lt;li&gt;计算完成后，最优路径被安装到路由表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;区域（Area）划分：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了解决大型网络 LSDB 过大、SPF 计算负担过重、LSA 泛洪范围过广的问题，OSPF 引入了&lt;strong&gt;层次化结构&lt;/strong&gt; - &lt;strong&gt;区域&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;骨干区域（Area 0）：&lt;/strong&gt; OSPF 域的核心。&lt;strong&gt;所有其他区域（非骨干区域）必须直接连接到骨干区域&lt;/strong&gt;。骨干区域负责在非骨干区域之间传递路由信息。区域 0 的 LSDB 包含所有区域的汇总路由信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非骨干区域（Area 1, Area 2, etc）：&lt;/strong&gt; 内部路由器的 LSDB 只包含本区域的详细拓扑信息和来自其他区域的&lt;strong&gt;汇总路由信息&lt;/strong&gt;（由 ABR 生成）。这大大减小了 LSDB 的规模，限制了 LSA 泛洪的范围，提高了网络的扩展性和稳定性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区域边界路由器（ABR - Area Border Router）：&lt;/strong&gt; 连接多个区域（至少一个区域是 Area 0）的路由器。它负责：
&lt;ul&gt;
&lt;li&gt;将其连接区域的内部路由信息&lt;strong&gt;汇总&lt;/strong&gt;后通告到骨干区域。&lt;/li&gt;
&lt;li&gt;将骨干区域学到的其他区域的汇总路由信息（以及外部路由）通告到其连接的非骨干区域。&lt;/li&gt;
&lt;li&gt;维护所连接每个区域的独立 LSDB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;邻居和邻接关系建立：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;邻居（Neighbor）：&lt;/strong&gt; 通过 Hello 协议发现的、连接在同一链路上的其他 OSPF 路由器。两台路由器交换 Hello 包，确认参数（如 Area ID, Hello/Dead Interval, 认证密码等）匹配后成为邻居。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邻接（Adjacency）：&lt;/strong&gt; 在邻居关系基础上，需要&lt;strong&gt;同步 LSDB&lt;/strong&gt; 的路由器对之间建立邻接关系。只有建立了邻接关系的路由器才会交换 LSA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立过程关键状态：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Down -&amp;gt; Init：&lt;/strong&gt; 收到邻居的 Hello 包（包中没有包含自己的 Router ID）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Init -&amp;gt; 2-Way：&lt;/strong&gt; 收到邻居的 Hello 包（包中已包含自己的 Router ID）。&lt;strong&gt;选举 DR/BDR（如果需要）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2-Way -&amp;gt; ExStart：&lt;/strong&gt; （仅与 DR/BDR 或点对点链路上的邻居）协商主从关系和初始 DD 序列号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ExStart -&amp;gt; Exchange：&lt;/strong&gt; 交换 DBD 包（Database Description），描述自己 LSDB 的摘要（LSA 头部）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exchange -&amp;gt; Loading：&lt;/strong&gt; 通过 LSR（Link State Request）请求和 LSU（Link State Update）发送自己缺少的或更新的完整 LSA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loading -&amp;gt; Full：&lt;/strong&gt; LSDB 同步完成，邻接关系建立成功。开始定期发送 Hello 包维护邻居关系，并泛洪 LSA 更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ospf-工作流程概览&#34;&gt;OSPF 工作流程概览
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;启动与邻居发现：&lt;/strong&gt; 路由器在接口启用 OSPF，开始发送 Hello 包。发现邻居。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邻接关系建立与 LSDB 同步：&lt;/strong&gt; 与符合条件的邻居（如 DR/BDR 或点对点邻居）建立邻接，交换 DBD、LSR、LSU 包，同步 LSDB。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护 LSDB：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;当本地链路状态发生变化（如接口 Up/Down，Cost 改变），路由器产生新的 LSA。&lt;/li&gt;
&lt;li&gt;新的 LSA 被泛洪给所有建立了邻接关系的邻居。&lt;/li&gt;
&lt;li&gt;邻居收到新 LSA 后，更新自己的 LSDB，并继续泛洪（除始发路由器外），同时&lt;strong&gt;立即&lt;/strong&gt;触发一次 SPF 计算（部分计算或完全计算，取决于 LSA 类型）。&lt;/li&gt;
&lt;li&gt;定期发送 LSA（老化时间默认为 30 分钟），收到后会刷新老化计时器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由计算：&lt;/strong&gt; 路由器使用 SPF 算法基于最新的 LSDB 计算最短路径树，将最优路径安装到路由表中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护邻居关系：&lt;/strong&gt; 通过周期性的 Hello 包（默认 10 秒/30 秒 Dead）维护邻居关系。若在 Dead Interval 内未收到邻居的 Hello 包，则认为邻居失效，清除邻接关系，移除该邻居产生的 LSA，触发新的 SPF 计算。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;OSPF 是一个强大、复杂且高度可扩展的链路状态内部网关协议。其核心在于每个路由器都拥有相同的网络拓扑地图（LSDB），并独立运行 SPF 算法计算无环的最短路径。通过区域划分解决了大型网络的可扩展性问题。理解 LSA 的类型和作用、邻居/邻接建立过程、DR/BDR 角色、区域概念（尤其是 Area 0）以及 SPF 计算原理是掌握 OSPF 的关键。虽然配置和设计比 RIP 复杂，但其快速收敛、无环、可扩展的特性使其成为现代企业网和数据中心内部网络路由的首选协议之一。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Roce介绍</title>
        <link>https://example.com/p/roce%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/roce%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;h2 id=&#34;roce&#34;&gt;RoCE
&lt;/h2&gt;&lt;h3 id=&#34;什么是roce&#34;&gt;什么是RoCE？
&lt;/h3&gt;&lt;p&gt;全称RDMA over Converged Ethernet，RoCE是一种基于以太网的远程直接内存访问（RDMA）技术，旨在通过优化协议栈和硬件卸载，实现高性能、低延迟的数据传输。其核心是通过绕过操作系统内核，减少数据复制和CPU开销，尤其适用于AI训练、超算和分布式存储等场景。&lt;/p&gt;
&lt;p&gt;从 2010 年开始，RMDA 开始引起越来越多的关注，当时IBTA发布了第一个在融合以太网 (RoCE) 上运行 RMDA 的规范。然而，最初的规范将 RoCE 部署限制在单个第 2 层域，因为 RoCE 封装帧没有路由功能。2014 年，IBTA 发布了 RoCEv2，它更新了最初的 RoCE 规范以支持跨第 3 层网络的路由，使其更适合超大规模数据中心网络和企业数据中心等。&lt;/p&gt;
&lt;h3 id=&#34;rocev1&#34;&gt;&lt;strong&gt;RoCEv1&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;2010年4月，IBTA发布了RoCE，此标准是作为Infiniband Architecture Specification的附加件发布的，所以也称为IBoE（InfiniBand over Ethernet）。这时的RoCE标准是在以太链路层之上用IB网络层代替了TCP/IP网络层，所以不支持IP路由功能。RoCE V1协议在以太层的typeID是0x8915。&lt;/p&gt;
&lt;p&gt;在RoCE中，infiniband的链路层协议头被去掉，用来表示地址的GUID被转换成以太网的MAC。Infiniband依赖于无损的物理传输，RoCE也同样依赖于无损的以太传输，这一要求会给以太网的部署带来了成本和管理上的开销。&lt;/p&gt;
&lt;p&gt;以太网的无损传输必须依靠L2的QoS支持，比如PFC(Priority Flow Control)，接收端在buffer池超过阈值时会向发送方发出pause帧，发送方MAC层在收到pause帧后，自动降低发送速率。这一要求，意味着整个传输环节上的所有节点包括end、switch、router，都必须全部支持L2 QoS，否则链路上的PFC就不能在两端发挥有效作用。&lt;/p&gt;
&lt;h3 id=&#34;rocev2&#34;&gt;RoCEv2
&lt;/h3&gt;&lt;p&gt;由于RoCEv1的数据帧不带IP头部，所以只能在L2子网内通信。为了解决此问题，IBTA于2014年提出了RoCE V2，RoCEv2扩展了RoCEv1，将GRH(Global Routing Header)换成UDP header +　IP header，扩展后的帧结构如下图所示。&lt;/p&gt;
&lt;p&gt;针对RoCE v1和RoCE v2，以下两点值得注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RoCE v1(Layer 2)运作在Ethernet Link Layer(Layer 2)所以Ethertype 0x8915，所以正常的Frame大小为1500 bytes，而Jumbo Frame则是9000 bytes。&lt;/li&gt;
&lt;li&gt;RoCE v2(Layer 3)运作在UDP/IPv4或UDP/IPv6之上(Layer 3)，采用UDP Port 4791进行传输。因为 RoCE v2的封包是在 Layer 3上可进行路由，所以有时又会称为Routable RoCE或简称RRoCE。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/roce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;rocev2的普及性&#34;&gt;&lt;strong&gt;RoCEv2的普及性&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;生态成熟度&lt;/strong&gt;：国内云计算与AI企业（如阿里云、腾讯云、华为云）普遍采用RoCEv2，因其兼容现有以太网架构且性价比高。例如，华为鲲鹏920芯片已支持100Gbps RoCE，并在数据中心部署中实现&lt;strong&gt;端到端延迟5-10μs&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：大规模AI训练（如千卡级集群）和分布式存储（如EMC Isilon）通过RoCEv2优化通信效率，实际带宽利用率达&lt;strong&gt;90%以上&lt;/strong&gt;（400G以太网实测360Gbps）。&lt;/p&gt;
&lt;h3 id=&#34;对比infiniband&#34;&gt;&lt;strong&gt;对比InfiniBand&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;RoCEv2&lt;/th&gt;
          &lt;th&gt;InfiniBand&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;协议栈&lt;/td&gt;
          &lt;td&gt;基于UDP/IP的以太网扩展&lt;/td&gt;
          &lt;td&gt;专用协议栈（物理层到传输层独立设计）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;部署成本&lt;/td&gt;
          &lt;td&gt;利用现有以太网设备，成本低&lt;/td&gt;
          &lt;td&gt;需专用交换机和网卡，成本高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;扩展性&lt;/td&gt;
          &lt;td&gt;支持三层路由，扩展性强&lt;/td&gt;
          &lt;td&gt;依赖子网管理器（SM），集中式管理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;性能&lt;/td&gt;
          &lt;td&gt;延迟略高（微秒级），吞吐量接近IB&lt;/td&gt;
          &lt;td&gt;超低延迟（纳秒级），吞吐量更高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;适用场景&lt;/td&gt;
          &lt;td&gt;通用数据中心、云计算、AI训练&lt;/td&gt;
          &lt;td&gt;超算中心、极致性能要求的HPC环境&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>BGP协议介绍</title>
        <link>https://example.com/p/bgp%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Wed, 16 Jul 2025 14:05:05 +0800</pubDate>
        
        <guid>https://example.com/p/bgp%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;p&gt;BGP协议&lt;/p&gt;
&lt;h4 id=&#34;1什么是bgp路由协议&#34;&gt;1、什么是bgp路由协议
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP是一种基于距离矢量的路由协议，用于实现不同AS之间的路由可达。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP协议的基本特点：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）BGP是一种外部网关协议，其着眼点不在于发现和计算路由，而在于控制路由的传播和选择最佳路由；&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）BGP使用TCP作为其传输层协议（端口号179）,提高了协议的可靠性； &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）BGP是一种距离矢量路由协议，在设计上就避免了环路的发生；&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）BGP提供了丰富的路由策略，能够实现路由的灵活过滤和选择； &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）BGP采用触发式增量更新，而不是周期性的更新；&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;2如何建立bgp对等体&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;2、如何建立bgp对等体&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）&lt;/font&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;TCP连接建立&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）BGP路由器发送OPEN报文协商参数&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）BGP路由器发送keepalive报文完成对等体建立&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）&lt;/font&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;参数协商正常后双方相互发送keepalive报文，收到对方的keepalive报文后对等体建立成功，同时后续定期发送keepalive报文用于保持连接。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）BGP对等体关系建立好了，就可以通过BGP update 报文通告路由到对等体。收到对方的keepalive报文后对等体建立成功，同时后续定期发送keepalive报文用于保持连接。&lt;/font&gt;
&lt;img src=&#34;https://example.com/img/bgp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3bgp的报文类型&#34;&gt;3、bgp的报文类型
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/img/bgp2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;4bgp状态变化&#34;&gt;4、bgp状态变化
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）Idle状态是BGP初始状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Idle状态下，BGP拒绝对等体发送的连接请求。只有在收到本设备的Start事件后，BGP才开始尝试和其它BGP对等体进行TCP连接，并转至Connect状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;Start事件是由一个操作者配置一个BGP过程，或者重置一个已经存在的过程或者路由器软件重置BGP过程引起的。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;任何状态中收到Notification报文或TCP拆链通知等Error事件后，BGP都会转至Idle状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）Connect状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Connect状态下，BGP启动连接重传定时器（Connect Retry），等待TCP完成连接。&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接成功，那么BGP向对等体发送Open报文，并转至OpenSent状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接失败，那么BGP转至Active状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP继续尝试和其它BGP对等体进行TCP连接，停留在Connect状态。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）Active状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Active状态下，BGP总是在试图建立TCP连接。&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接成功，那么BGP向对等体发送Open报文，关闭连接重传定时器，并转至OpenSent状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接失败，那么BGP停留在Active状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP转至Connect状态。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）Opensent状态、openconfirm状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;TCP三次握手建立成功后，发送open报文建立对等体关系，此时的状态为 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;opensent状态，当收到对端回应的open报文，并且参数检查无误，在发送keepalive报文后进入openconfirm状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）established状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;进入openconfirm状态后，收到对端的keepalive报文后进入established状态。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;5bgp的路由生成&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;5、bgp的路由生成&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP路由是通过BGP命令通告而成的，而通告BGP路由的方法有两种：network和Import。 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）network方式：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;使用network命令可以将当前设备路由表中的路由（非BGP）发布到BGP路由表中并通告给邻居，和OSPF中使用network命令的方式大同小异，只不过在BGP宣告时，只需要宣告网段+掩码数即可，如：network 12.12.0.0 16。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）Import方式：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;使用Import命令可以将该路由器学到的路由信息重分发到BGP路由表中，是BGP宣告路由的一种方式，可以引入BGP的路由包括：直连路由、静态路由及动态路由协议学到的路由。其命令格式与在RIP中重分发OSPF差不多。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;6bgp通告原则&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;6、BGP通告原则&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP设备会将最优路由加入BGP路由表，形成BGP路由。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP设备与对等体建立邻居关系后，采用以下交互原则： &lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;从IBGP对等体获得的BGP路由，BGP设备只传递给它的EBGP对等体。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;从EBGP对等体获得的BGP路由，BGP设备传递给它所有EBGP和IBGP对等体（对等体是IBGP只能传递一跳，对等体是EBGP则不限制）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;当存在多条到达同一目的地址的有效路由时，BGP设备只将最优路由发布给对等体&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;路由更新时，BGP设备只发送更新的BGP路由&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有对等体发送的路由，BGP设备都会接收&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有EBGP对等体在传递过程中下一跳改变&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有IBGP对等体在传递过程中下一跳不变（需要特别注意）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;默认EBGP传递时 TTL值为1（需要特别注意）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;默认IBGP传递时 TTL值为255&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Https的原理</title>
        <link>https://example.com/p/https%E7%9A%84%E5%8E%9F%E7%90%86/</link>
        <pubDate>Sun, 13 Jul 2025 14:27:57 +0800</pubDate>
        
        <guid>https://example.com/p/https%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
        <description>&lt;p&gt;1.客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的80端口)。&lt;/p&gt;
&lt;p&gt;2.采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书，证书是需要申请的，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书 (当然了是要钱的，安全级别越高价格越贵)。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。&lt;/p&gt;
&lt;p&gt;3.服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。Chrome 浏览器点击地址栏的锁标志再点击证书就可以看到证书详细信息。&lt;br&gt;
4.客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。就像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/similianjie.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;
如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。&lt;/p&gt;
&lt;p&gt;5.客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。&lt;/p&gt;
&lt;p&gt;6.服务器在收到随机码 KEY 之后会使用私钥B将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。&lt;/p&gt;
&lt;p&gt;7.服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。&lt;/p&gt;
&lt;p&gt;8.双方使用对称加密愉快地传输所有数据。
&lt;img src=&#34;https://example.com/img/%e7%a4%ba%e6%84%8f%e5%9b%be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
