<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on star‘s Blog</title>
        <link>https://example.com/post/</link>
        <description>Recent content in Posts on star‘s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Tue, 29 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>OSPF协议详解</title>
        <link>https://example.com/p/ospf%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/ospf%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;p&gt;好的，我们来详细解析一下 &lt;strong&gt;OSPF（Open Shortest Path First）&lt;/strong&gt; 协议。它是网络协议栈中非常重要的&lt;strong&gt;内部网关协议（IGP）&lt;/strong&gt;，用于在&lt;strong&gt;单一自治系统（AS）&lt;/strong&gt; 内部的路由器之间动态地交换路由信息并计算最优路径。&lt;/p&gt;
&lt;h2 id=&#34;核心定位与目标&#34;&gt;核心定位与目标
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型：&lt;/strong&gt; 链路状态路由协议（Link-State Routing Protocol）。这是理解 OSPF 的关键。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标：&lt;/strong&gt; 让 AS 内部的所有路由器都拥有一张&lt;strong&gt;完全相同&lt;/strong&gt;的、描述整个 AS 网络拓扑结构的“地图”（链路状态数据库 - LSDB），并基于此地图独立地使用 &lt;strong&gt;SPF（Shortest Path First，即 Dijkstra）算法&lt;/strong&gt; 计算出到达 AS 内所有网络的最短（最优）路径树，最终形成路由表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对比 RIP：&lt;/strong&gt; 相比距离矢量协议（如 RIP），OSPF 收敛速度快得多（网络变化时路由信息快速稳定），支持大型网络（通过区域划分），无路由环路（由 SPF 算法保证），支持 VLSM 和 CIDR，提供更丰富的路由度量（Cost）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关键特性和概念&#34;&gt;关键特性和概念
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链路状态（Link-State）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器不再像 RIP 那样只告诉邻居“我到某个网络的距离是多少”，而是主动&lt;strong&gt;描述自己直连的网络状态&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这个描述信息称为 &lt;strong&gt;LSA（Link State Advertisement - 链路状态通告）&lt;/strong&gt;。它包含的信息如：该路由器连接了哪些网络、邻居路由器是谁、连接到这些链路/邻居的“代价（Cost）”是多少。&lt;/li&gt;
&lt;li&gt;路由器将生成的 LSA &lt;strong&gt;泛洪（Flooding）&lt;/strong&gt; 给 OSPF 域内的&lt;strong&gt;所有其他路由器&lt;/strong&gt;（在区域限制内）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链路状态数据库（LSDB - Link State Database）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器收到域内所有其他路由器发来的 LSA 后，会把这些 LSA 存储在自己的 LSDB 中。&lt;/li&gt;
&lt;li&gt;理想情况下，&lt;strong&gt;同一个区域（Area）内所有路由器的 LSDB 内容是完全一致的&lt;/strong&gt;。这是路由器能独立、一致地计算最短路径树的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPF（Dijkstra）算法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器都&lt;strong&gt;独立&lt;/strong&gt;地以自己的视角（作为根）运行 SPF 算法。&lt;/li&gt;
&lt;li&gt;算法基于 LSDB 中存储的完整拓扑信息（节点=路由器/网络，边=链路，边权=Cost），计算出一棵到达所有目标网络的最短路径树（SPT - Shortest Path Tree）。&lt;/li&gt;
&lt;li&gt;这棵树上的路径就是该路由器认为的到达各网络的最优无环路径。&lt;/li&gt;
&lt;li&gt;计算完成后，最优路径被安装到路由表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;区域（Area）划分：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了解决大型网络 LSDB 过大、SPF 计算负担过重、LSA 泛洪范围过广的问题，OSPF 引入了&lt;strong&gt;层次化结构&lt;/strong&gt; - &lt;strong&gt;区域&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;骨干区域（Area 0）：&lt;/strong&gt; OSPF 域的核心。&lt;strong&gt;所有其他区域（非骨干区域）必须直接连接到骨干区域&lt;/strong&gt;。骨干区域负责在非骨干区域之间传递路由信息。区域 0 的 LSDB 包含所有区域的汇总路由信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非骨干区域（Area 1, Area 2, etc）：&lt;/strong&gt; 内部路由器的 LSDB 只包含本区域的详细拓扑信息和来自其他区域的&lt;strong&gt;汇总路由信息&lt;/strong&gt;（由 ABR 生成）。这大大减小了 LSDB 的规模，限制了 LSA 泛洪的范围，提高了网络的扩展性和稳定性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区域边界路由器（ABR - Area Border Router）：&lt;/strong&gt; 连接多个区域（至少一个区域是 Area 0）的路由器。它负责：
&lt;ul&gt;
&lt;li&gt;将其连接区域的内部路由信息&lt;strong&gt;汇总&lt;/strong&gt;后通告到骨干区域。&lt;/li&gt;
&lt;li&gt;将骨干区域学到的其他区域的汇总路由信息（以及外部路由）通告到其连接的非骨干区域。&lt;/li&gt;
&lt;li&gt;维护所连接每个区域的独立 LSDB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;邻居和邻接关系建立：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;邻居（Neighbor）：&lt;/strong&gt; 通过 Hello 协议发现的、连接在同一链路上的其他 OSPF 路由器。两台路由器交换 Hello 包，确认参数（如 Area ID, Hello/Dead Interval, 认证密码等）匹配后成为邻居。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邻接（Adjacency）：&lt;/strong&gt; 在邻居关系基础上，需要&lt;strong&gt;同步 LSDB&lt;/strong&gt; 的路由器对之间建立邻接关系。只有建立了邻接关系的路由器才会交换 LSA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立过程关键状态：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Down -&amp;gt; Init：&lt;/strong&gt; 收到邻居的 Hello 包（包中没有包含自己的 Router ID）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Init -&amp;gt; 2-Way：&lt;/strong&gt; 收到邻居的 Hello 包（包中已包含自己的 Router ID）。&lt;strong&gt;选举 DR/BDR（如果需要）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2-Way -&amp;gt; ExStart：&lt;/strong&gt; （仅与 DR/BDR 或点对点链路上的邻居）协商主从关系和初始 DD 序列号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ExStart -&amp;gt; Exchange：&lt;/strong&gt; 交换 DBD 包（Database Description），描述自己 LSDB 的摘要（LSA 头部）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exchange -&amp;gt; Loading：&lt;/strong&gt; 通过 LSR（Link State Request）请求和 LSU（Link State Update）发送自己缺少的或更新的完整 LSA。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loading -&amp;gt; Full：&lt;/strong&gt; LSDB 同步完成，邻接关系建立成功。开始定期发送 Hello 包维护邻居关系，并泛洪 LSA 更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ospf-工作流程概览&#34;&gt;OSPF 工作流程概览
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;启动与邻居发现：&lt;/strong&gt; 路由器在接口启用 OSPF，开始发送 Hello 包。发现邻居。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邻接关系建立与 LSDB 同步：&lt;/strong&gt; 与符合条件的邻居（如 DR/BDR 或点对点邻居）建立邻接，交换 DBD、LSR、LSU 包，同步 LSDB。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护 LSDB：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;当本地链路状态发生变化（如接口 Up/Down，Cost 改变），路由器产生新的 LSA。&lt;/li&gt;
&lt;li&gt;新的 LSA 被泛洪给所有建立了邻接关系的邻居。&lt;/li&gt;
&lt;li&gt;邻居收到新 LSA 后，更新自己的 LSDB，并继续泛洪（除始发路由器外），同时&lt;strong&gt;立即&lt;/strong&gt;触发一次 SPF 计算（部分计算或完全计算，取决于 LSA 类型）。&lt;/li&gt;
&lt;li&gt;定期发送 LSA（老化时间默认为 30 分钟），收到后会刷新老化计时器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由计算：&lt;/strong&gt; 路由器使用 SPF 算法基于最新的 LSDB 计算最短路径树，将最优路径安装到路由表中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护邻居关系：&lt;/strong&gt; 通过周期性的 Hello 包（默认 10 秒/30 秒 Dead）维护邻居关系。若在 Dead Interval 内未收到邻居的 Hello 包，则认为邻居失效，清除邻接关系，移除该邻居产生的 LSA，触发新的 SPF 计算。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;OSPF 是一个强大、复杂且高度可扩展的链路状态内部网关协议。其核心在于每个路由器都拥有相同的网络拓扑地图（LSDB），并独立运行 SPF 算法计算无环的最短路径。通过区域划分解决了大型网络的可扩展性问题。理解 LSA 的类型和作用、邻居/邻接建立过程、DR/BDR 角色、区域概念（尤其是 Area 0）以及 SPF 计算原理是掌握 OSPF 的关键。虽然配置和设计比 RIP 复杂，但其快速收敛、无环、可扩展的特性使其成为现代企业网和数据中心内部网络路由的首选协议之一。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Roce介绍</title>
        <link>https://example.com/p/roce%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/roce%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;h2 id=&#34;roce&#34;&gt;RoCE
&lt;/h2&gt;&lt;h3 id=&#34;什么是roce&#34;&gt;什么是RoCE？
&lt;/h3&gt;&lt;p&gt;全称RDMA over Converged Ethernet，RoCE是一种基于以太网的远程直接内存访问（RDMA）技术，旨在通过优化协议栈和硬件卸载，实现高性能、低延迟的数据传输。其核心是通过绕过操作系统内核，减少数据复制和CPU开销，尤其适用于AI训练、超算和分布式存储等场景。&lt;/p&gt;
&lt;p&gt;从 2010 年开始，RMDA 开始引起越来越多的关注，当时IBTA发布了第一个在融合以太网 (RoCE) 上运行 RMDA 的规范。然而，最初的规范将 RoCE 部署限制在单个第 2 层域，因为 RoCE 封装帧没有路由功能。2014 年，IBTA 发布了 RoCEv2，它更新了最初的 RoCE 规范以支持跨第 3 层网络的路由，使其更适合超大规模数据中心网络和企业数据中心等。&lt;/p&gt;
&lt;h3 id=&#34;rocev1&#34;&gt;&lt;strong&gt;RoCEv1&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;2010年4月，IBTA发布了RoCE，此标准是作为Infiniband Architecture Specification的附加件发布的，所以也称为IBoE（InfiniBand over Ethernet）。这时的RoCE标准是在以太链路层之上用IB网络层代替了TCP/IP网络层，所以不支持IP路由功能。RoCE V1协议在以太层的typeID是0x8915。&lt;/p&gt;
&lt;p&gt;在RoCE中，infiniband的链路层协议头被去掉，用来表示地址的GUID被转换成以太网的MAC。Infiniband依赖于无损的物理传输，RoCE也同样依赖于无损的以太传输，这一要求会给以太网的部署带来了成本和管理上的开销。&lt;/p&gt;
&lt;p&gt;以太网的无损传输必须依靠L2的QoS支持，比如PFC(Priority Flow Control)，接收端在buffer池超过阈值时会向发送方发出pause帧，发送方MAC层在收到pause帧后，自动降低发送速率。这一要求，意味着整个传输环节上的所有节点包括end、switch、router，都必须全部支持L2 QoS，否则链路上的PFC就不能在两端发挥有效作用。&lt;/p&gt;
&lt;h3 id=&#34;rocev2&#34;&gt;RoCEv2
&lt;/h3&gt;&lt;p&gt;由于RoCEv1的数据帧不带IP头部，所以只能在L2子网内通信。为了解决此问题，IBTA于2014年提出了RoCE V2，RoCEv2扩展了RoCEv1，将GRH(Global Routing Header)换成UDP header +　IP header，扩展后的帧结构如下图所示。&lt;/p&gt;
&lt;p&gt;针对RoCE v1和RoCE v2，以下两点值得注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RoCE v1(Layer 2)运作在Ethernet Link Layer(Layer 2)所以Ethertype 0x8915，所以正常的Frame大小为1500 bytes，而Jumbo Frame则是9000 bytes。&lt;/li&gt;
&lt;li&gt;RoCE v2(Layer 3)运作在UDP/IPv4或UDP/IPv6之上(Layer 3)，采用UDP Port 4791进行传输。因为 RoCE v2的封包是在 Layer 3上可进行路由，所以有时又会称为Routable RoCE或简称RRoCE。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/roce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;rocev2的普及性&#34;&gt;&lt;strong&gt;RoCEv2的普及性&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;生态成熟度&lt;/strong&gt;：国内云计算与AI企业（如阿里云、腾讯云、华为云）普遍采用RoCEv2，因其兼容现有以太网架构且性价比高。例如，华为鲲鹏920芯片已支持100Gbps RoCE，并在数据中心部署中实现&lt;strong&gt;端到端延迟5-10μs&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：大规模AI训练（如千卡级集群）和分布式存储（如EMC Isilon）通过RoCEv2优化通信效率，实际带宽利用率达&lt;strong&gt;90%以上&lt;/strong&gt;（400G以太网实测360Gbps）。&lt;/p&gt;
&lt;h3 id=&#34;对比infiniband&#34;&gt;&lt;strong&gt;对比InfiniBand&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;RoCEv2&lt;/th&gt;
          &lt;th&gt;InfiniBand&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;协议栈&lt;/td&gt;
          &lt;td&gt;基于UDP/IP的以太网扩展&lt;/td&gt;
          &lt;td&gt;专用协议栈（物理层到传输层独立设计）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;部署成本&lt;/td&gt;
          &lt;td&gt;利用现有以太网设备，成本低&lt;/td&gt;
          &lt;td&gt;需专用交换机和网卡，成本高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;扩展性&lt;/td&gt;
          &lt;td&gt;支持三层路由，扩展性强&lt;/td&gt;
          &lt;td&gt;依赖子网管理器（SM），集中式管理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;性能&lt;/td&gt;
          &lt;td&gt;延迟略高（微秒级），吞吐量接近IB&lt;/td&gt;
          &lt;td&gt;超低延迟（纳秒级），吞吐量更高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;适用场景&lt;/td&gt;
          &lt;td&gt;通用数据中心、云计算、AI训练&lt;/td&gt;
          &lt;td&gt;超算中心、极致性能要求的HPC环境&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>BGP协议介绍</title>
        <link>https://example.com/p/bgp%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Wed, 16 Jul 2025 14:05:05 +0800</pubDate>
        
        <guid>https://example.com/p/bgp%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;p&gt;BGP协议&lt;/p&gt;
&lt;h4 id=&#34;1什么是bgp路由协议&#34;&gt;1、什么是bgp路由协议
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP是一种基于距离矢量的路由协议，用于实现不同AS之间的路由可达。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP协议的基本特点：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）BGP是一种外部网关协议，其着眼点不在于发现和计算路由，而在于控制路由的传播和选择最佳路由；&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）BGP使用TCP作为其传输层协议（端口号179）,提高了协议的可靠性； &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）BGP是一种距离矢量路由协议，在设计上就避免了环路的发生；&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）BGP提供了丰富的路由策略，能够实现路由的灵活过滤和选择； &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）BGP采用触发式增量更新，而不是周期性的更新；&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;2如何建立bgp对等体&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;2、如何建立bgp对等体&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）&lt;/font&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;TCP连接建立&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）BGP路由器发送OPEN报文协商参数&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）BGP路由器发送keepalive报文完成对等体建立&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）&lt;/font&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;参数协商正常后双方相互发送keepalive报文，收到对方的keepalive报文后对等体建立成功，同时后续定期发送keepalive报文用于保持连接。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）BGP对等体关系建立好了，就可以通过BGP update 报文通告路由到对等体。收到对方的keepalive报文后对等体建立成功，同时后续定期发送keepalive报文用于保持连接。&lt;/font&gt;
&lt;img src=&#34;https://example.com/img/bgp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3bgp的报文类型&#34;&gt;3、bgp的报文类型
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/img/bgp2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;4bgp状态变化&#34;&gt;4、bgp状态变化
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）Idle状态是BGP初始状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Idle状态下，BGP拒绝对等体发送的连接请求。只有在收到本设备的Start事件后，BGP才开始尝试和其它BGP对等体进行TCP连接，并转至Connect状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;Start事件是由一个操作者配置一个BGP过程，或者重置一个已经存在的过程或者路由器软件重置BGP过程引起的。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;任何状态中收到Notification报文或TCP拆链通知等Error事件后，BGP都会转至Idle状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）Connect状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Connect状态下，BGP启动连接重传定时器（Connect Retry），等待TCP完成连接。&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接成功，那么BGP向对等体发送Open报文，并转至OpenSent状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接失败，那么BGP转至Active状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP继续尝试和其它BGP对等体进行TCP连接，停留在Connect状态。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）Active状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Active状态下，BGP总是在试图建立TCP连接。&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接成功，那么BGP向对等体发送Open报文，关闭连接重传定时器，并转至OpenSent状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接失败，那么BGP停留在Active状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP转至Connect状态。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）Opensent状态、openconfirm状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;TCP三次握手建立成功后，发送open报文建立对等体关系，此时的状态为 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;opensent状态，当收到对端回应的open报文，并且参数检查无误，在发送keepalive报文后进入openconfirm状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）established状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;进入openconfirm状态后，收到对端的keepalive报文后进入established状态。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;5bgp的路由生成&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;5、bgp的路由生成&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP路由是通过BGP命令通告而成的，而通告BGP路由的方法有两种：network和Import。 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）network方式：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;使用network命令可以将当前设备路由表中的路由（非BGP）发布到BGP路由表中并通告给邻居，和OSPF中使用network命令的方式大同小异，只不过在BGP宣告时，只需要宣告网段+掩码数即可，如：network 12.12.0.0 16。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）Import方式：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;使用Import命令可以将该路由器学到的路由信息重分发到BGP路由表中，是BGP宣告路由的一种方式，可以引入BGP的路由包括：直连路由、静态路由及动态路由协议学到的路由。其命令格式与在RIP中重分发OSPF差不多。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;6bgp通告原则&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;6、BGP通告原则&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP设备会将最优路由加入BGP路由表，形成BGP路由。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP设备与对等体建立邻居关系后，采用以下交互原则： &lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;从IBGP对等体获得的BGP路由，BGP设备只传递给它的EBGP对等体。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;从EBGP对等体获得的BGP路由，BGP设备传递给它所有EBGP和IBGP对等体（对等体是IBGP只能传递一跳，对等体是EBGP则不限制）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;当存在多条到达同一目的地址的有效路由时，BGP设备只将最优路由发布给对等体&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;路由更新时，BGP设备只发送更新的BGP路由&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有对等体发送的路由，BGP设备都会接收&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有EBGP对等体在传递过程中下一跳改变&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有IBGP对等体在传递过程中下一跳不变（需要特别注意）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;默认EBGP传递时 TTL值为1（需要特别注意）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;默认IBGP传递时 TTL值为255&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Https的原理</title>
        <link>https://example.com/p/https%E7%9A%84%E5%8E%9F%E7%90%86/</link>
        <pubDate>Sun, 13 Jul 2025 14:27:57 +0800</pubDate>
        
        <guid>https://example.com/p/https%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
        <description>&lt;p&gt;1.客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的80端口)。&lt;/p&gt;
&lt;p&gt;2.采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书，证书是需要申请的，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书 (当然了是要钱的，安全级别越高价格越贵)。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。&lt;/p&gt;
&lt;p&gt;3.服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。Chrome 浏览器点击地址栏的锁标志再点击证书就可以看到证书详细信息。&lt;br&gt;
4.客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。就像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/similianjie.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;
如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。&lt;/p&gt;
&lt;p&gt;5.客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。&lt;/p&gt;
&lt;p&gt;6.服务器在收到随机码 KEY 之后会使用私钥B将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。&lt;/p&gt;
&lt;p&gt;7.服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。&lt;/p&gt;
&lt;p&gt;8.双方使用对称加密愉快地传输所有数据。
&lt;img src=&#34;https://example.com/img/%e7%a4%ba%e6%84%8f%e5%9b%be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Calico网络插件介绍</title>
        <link>https://example.com/p/calico%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Sat, 12 Jul 2025 14:46:36 +0800</pubDate>
        
        <guid>https://example.com/p/calico%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://example.com/img/calico.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;Felix：运行在每一台 Host 的 agent 进程，主要负责网络接口管理和监听、路由、ARP 管理、ACL 管理和同步、状态上报等。&lt;/p&gt;
&lt;p&gt;etcd：分布式键值存储，主要负责网络元数据一致性，确保 Calico 网络状态的准确性，可以与 kubernetes 共用；&lt;/p&gt;
&lt;p&gt;BGP Client（BIRD）：Calico 为每一台 Host 部署一个 BGP Client，使用 BIRD 实现，BIRD 是一个单独的持&lt;a class=&#34;link&#34; href=&#34;http://mp.weixin.qq.com/s?__biz=MjM5MzU5NDYwNA==&amp;amp;mid=2247505049&amp;amp;idx=1&amp;amp;sn=7f4c3f0047c0f7f93a56f0ca44c6b813&amp;amp;chksm=a696391a91e1b00c008ac3cf90972ecdebfec4fce497ef4dd760461229fdd134bdc5744de318&amp;amp;scene=21#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;续发展的项目，实现了众多动态路由协议比如 BGP、OSPF、RIP 等。在 Calico 的角色是监&lt;/a&gt;听 Host 上由 Felix 注入的路由信息，然后通过 BGP 协议广播告诉剩余 Host 节点，从而实现网络互通。&lt;/p&gt;
&lt;p&gt;BGP Route Reflector：在大型网络规模中，如果仅仅使用 BGP client 形成 mesh 全网互联的方案就会导致规模限制，因为所有节点之间俩俩互联，需要 N^2 个连接，为了解决这个规模问题，可以采用 BGP 的 Router Reflector 的方法，使所有 BGP Client 仅与特定 RR 节点互联并做路由同步，从而大大减少连接数。&lt;/p&gt;
&lt;h3 id=&#34;calico-api-server&#34;&gt;Calico API Server
&lt;/h3&gt;&lt;p&gt;可以使用 kubectl 直接管理 Calico。&lt;/p&gt;
&lt;h3 id=&#34;felix&#34;&gt;Felix
&lt;/h3&gt;&lt;p&gt;Felix 以 agent 代理的形式在每台机器端点上运行。对路由和 ACL 以及主机编程，为该主机上的端点提供所需的连接。&lt;/p&gt;
&lt;p&gt;根据具体的编排器环境，Felix 负责：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将有关接口的信息编入内核，以便内核能够正确处理来自该端点的流量。特别是，确保主机响应来自每个工作负载的 ARP 请求，提供主机的 MAC，并为它所管理的接口启用 IP 转发。它还监控接口，以确保编程在适当的时候应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将其主机上的端点的路由编程到 Linux 内核的 FIB（转发信息库）。这可以确保到达主机上的以这些端点为目的地的数据包被相应地转发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ACL 编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 内核中编程 ACL，以确保只有有效的流量可以在端点之间发送，并且端点不能规避 Calico 的安全措施。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态报告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供网络健康数据。特别是在配置其主机时报告错误和问题。这些数据被写入数据存储，以便对网络的其他组件和运营商可见。&lt;/p&gt;
&lt;h3 id=&#34;bird&#34;&gt;BIRD
&lt;/h3&gt;&lt;p&gt;BGP Internet Routing Daemon，简称 BIRD。从 Felix 获取路由，并分发到网络上的 BGP peer，用于主机间的路由。在每个 Felix 代理的节点上运行。&lt;/p&gt;
&lt;p&gt;BGP 客户端负责：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由分配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 Felix 将路由插入 Linux 内核的 FIB 时，BGP 客户端将它们分配给部署中的其他节点。这确保了部署中的有效流量路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP 路由反射器的配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BGP 路由反射器通常是为大型部署而配置的，而不是一个标准的 BGP 客户端。BGP 路由反射器作为连接 BGP 客户端的一个中心点。(标准 BGP 要求每个 BGP 客户端在网状拓扑结构中与其他每个 BGP 客户端连接，这很难维护)。&lt;/p&gt;
&lt;p&gt;为了实现冗余，你可以无缝部署多个 BGP 路由反射器。BGP 路由反射器只参与网络的控制：没有终端数据通过它们。当 Calico BGP 客户端将其 FIB 中的路由通告给路由反射器时，路由反射器将这些路由通告给部署中的其他节点。&lt;/p&gt;
&lt;h3 id=&#34;confd&#34;&gt;confd
&lt;/h3&gt;&lt;p&gt;开源的、轻量级的配置管理工具。监控 Calico 数据存储对 BGP 配置和全局默认的日志变更，如 AS 号、日志级别和 IPAM 信息。&lt;/p&gt;
&lt;p&gt;Confd 根据存储中的数据更新，动态生成 BIRD 配置文件。当配置文件发生变化时，confd 会触发 BIRD 加载新的文件。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Markdown Syntax Guide</title>
        <link>https://example.com/p/markdown-syntax-guide/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/markdown-syntax-guide/</guid>
        <description>&lt;img src="https://example.com/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" /&gt;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings
&lt;/h2&gt;&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1
&lt;/h1&gt;&lt;h2 id=&#34;h2&#34;&gt;H2
&lt;/h2&gt;&lt;h3 id=&#34;h3&#34;&gt;H3
&lt;/h3&gt;&lt;h4 id=&#34;h4&#34;&gt;H4
&lt;/h4&gt;&lt;h5 id=&#34;h5&#34;&gt;H5
&lt;/h5&gt;&lt;h6 id=&#34;h6&#34;&gt;H6
&lt;/h6&gt;&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph
&lt;/h2&gt;&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes
&lt;/h2&gt;&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables
&lt;/h2&gt;&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Age&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Bob&lt;/td&gt;
          &lt;td&gt;27&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Alice&lt;/td&gt;
          &lt;td&gt;23&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Italics&lt;/th&gt;
          &lt;th&gt;Bold&lt;/th&gt;
          &lt;th&gt;Code&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&lt;/th&gt;
          &lt;th&gt;B&lt;/th&gt;
          &lt;th&gt;C&lt;/th&gt;
          &lt;th&gt;D&lt;/th&gt;
          &lt;th&gt;E&lt;/th&gt;
          &lt;th&gt;F&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td&gt;
          &lt;td&gt;Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td&gt;
          &lt;td&gt;Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td&gt;
          &lt;td&gt;Proin sit amet velit nec enim imperdiet vehicula.&lt;/td&gt;
          &lt;td&gt;Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td&gt;
          &lt;td&gt;Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks
&lt;/h2&gt;&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces
&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;diff-code-block&#34;&gt;Diff code block
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[dependencies.bevy]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;list-types&#34;&gt;List Types
&lt;/h2&gt;&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark
&lt;/h2&gt;&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;ALT&lt;/kbd&gt; + &lt;kbd&gt;Delete&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;h2 id=&#34;hyperlinked-image&#34;&gt;Hyperlinked image
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Google&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
