<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>网络 on star‘s Blog</title>
        <link>https://example.com/categories/%E7%BD%91%E7%BB%9C/</link>
        <description>Recent content in 网络 on star‘s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Tue, 22 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Roce介绍</title>
        <link>https://example.com/p/roce%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/roce%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;h2 id=&#34;roce&#34;&gt;RoCE
&lt;/h2&gt;&lt;h3 id=&#34;什么是roce&#34;&gt;什么是RoCE？
&lt;/h3&gt;&lt;p&gt;全称RDMA over Converged Ethernet，RoCE是一种基于以太网的远程直接内存访问（RDMA）技术，旨在通过优化协议栈和硬件卸载，实现高性能、低延迟的数据传输。其核心是通过绕过操作系统内核，减少数据复制和CPU开销，尤其适用于AI训练、超算和分布式存储等场景。&lt;/p&gt;
&lt;p&gt;从 2010 年开始，RMDA 开始引起越来越多的关注，当时IBTA发布了第一个在融合以太网 (RoCE) 上运行 RMDA 的规范。然而，最初的规范将 RoCE 部署限制在单个第 2 层域，因为 RoCE 封装帧没有路由功能。2014 年，IBTA 发布了 RoCEv2，它更新了最初的 RoCE 规范以支持跨第 3 层网络的路由，使其更适合超大规模数据中心网络和企业数据中心等。&lt;/p&gt;
&lt;h3 id=&#34;rocev1&#34;&gt;&lt;strong&gt;RoCEv1&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;2010年4月，IBTA发布了RoCE，此标准是作为Infiniband Architecture Specification的附加件发布的，所以也称为IBoE（InfiniBand over Ethernet）。这时的RoCE标准是在以太链路层之上用IB网络层代替了TCP/IP网络层，所以不支持IP路由功能。RoCE V1协议在以太层的typeID是0x8915。&lt;/p&gt;
&lt;p&gt;在RoCE中，infiniband的链路层协议头被去掉，用来表示地址的GUID被转换成以太网的MAC。Infiniband依赖于无损的物理传输，RoCE也同样依赖于无损的以太传输，这一要求会给以太网的部署带来了成本和管理上的开销。&lt;/p&gt;
&lt;p&gt;以太网的无损传输必须依靠L2的QoS支持，比如PFC(Priority Flow Control)，接收端在buffer池超过阈值时会向发送方发出pause帧，发送方MAC层在收到pause帧后，自动降低发送速率。这一要求，意味着整个传输环节上的所有节点包括end、switch、router，都必须全部支持L2 QoS，否则链路上的PFC就不能在两端发挥有效作用。&lt;/p&gt;
&lt;h3 id=&#34;rocev2&#34;&gt;RoCEv2
&lt;/h3&gt;&lt;p&gt;由于RoCEv1的数据帧不带IP头部，所以只能在L2子网内通信。为了解决此问题，IBTA于2014年提出了RoCE V2，RoCEv2扩展了RoCEv1，将GRH(Global Routing Header)换成UDP header +　IP header，扩展后的帧结构如下图所示。&lt;/p&gt;
&lt;p&gt;针对RoCE v1和RoCE v2，以下两点值得注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RoCE v1(Layer 2)运作在Ethernet Link Layer(Layer 2)所以Ethertype 0x8915，所以正常的Frame大小为1500 bytes，而Jumbo Frame则是9000 bytes。&lt;/li&gt;
&lt;li&gt;RoCE v2(Layer 3)运作在UDP/IPv4或UDP/IPv6之上(Layer 3)，采用UDP Port 4791进行传输。因为 RoCE v2的封包是在 Layer 3上可进行路由，所以有时又会称为Routable RoCE或简称RRoCE。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/roce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;rocev2的普及性&#34;&gt;&lt;strong&gt;RoCEv2的普及性&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;生态成熟度&lt;/strong&gt;：国内云计算与AI企业（如阿里云、腾讯云、华为云）普遍采用RoCEv2，因其兼容现有以太网架构且性价比高。例如，华为鲲鹏920芯片已支持100Gbps RoCE，并在数据中心部署中实现&lt;strong&gt;端到端延迟5-10μs&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：大规模AI训练（如千卡级集群）和分布式存储（如EMC Isilon）通过RoCEv2优化通信效率，实际带宽利用率达&lt;strong&gt;90%以上&lt;/strong&gt;（400G以太网实测360Gbps）。&lt;/p&gt;
&lt;h3 id=&#34;对比infiniband&#34;&gt;&lt;strong&gt;对比InfiniBand&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;RoCEv2&lt;/th&gt;
          &lt;th&gt;InfiniBand&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;协议栈&lt;/td&gt;
          &lt;td&gt;基于UDP/IP的以太网扩展&lt;/td&gt;
          &lt;td&gt;专用协议栈（物理层到传输层独立设计）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;部署成本&lt;/td&gt;
          &lt;td&gt;利用现有以太网设备，成本低&lt;/td&gt;
          &lt;td&gt;需专用交换机和网卡，成本高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;扩展性&lt;/td&gt;
          &lt;td&gt;支持三层路由，扩展性强&lt;/td&gt;
          &lt;td&gt;依赖子网管理器（SM），集中式管理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;性能&lt;/td&gt;
          &lt;td&gt;延迟略高（微秒级），吞吐量接近IB&lt;/td&gt;
          &lt;td&gt;超低延迟（纳秒级），吞吐量更高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;适用场景&lt;/td&gt;
          &lt;td&gt;通用数据中心、云计算、AI训练&lt;/td&gt;
          &lt;td&gt;超算中心、极致性能要求的HPC环境&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>BGP协议介绍</title>
        <link>https://example.com/p/bgp%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Wed, 16 Jul 2025 14:05:05 +0800</pubDate>
        
        <guid>https://example.com/p/bgp%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;p&gt;BGP协议&lt;/p&gt;
&lt;h4 id=&#34;1什么是bgp路由协议&#34;&gt;1、什么是bgp路由协议
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP是一种基于距离矢量的路由协议，用于实现不同AS之间的路由可达。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP协议的基本特点：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）BGP是一种外部网关协议，其着眼点不在于发现和计算路由，而在于控制路由的传播和选择最佳路由；&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）BGP使用TCP作为其传输层协议（端口号179）,提高了协议的可靠性； &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）BGP是一种距离矢量路由协议，在设计上就避免了环路的发生；&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）BGP提供了丰富的路由策略，能够实现路由的灵活过滤和选择； &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）BGP采用触发式增量更新，而不是周期性的更新；&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;2如何建立bgp对等体&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;2、如何建立bgp对等体&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）&lt;/font&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;TCP连接建立&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）BGP路由器发送OPEN报文协商参数&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）BGP路由器发送keepalive报文完成对等体建立&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）&lt;/font&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;参数协商正常后双方相互发送keepalive报文，收到对方的keepalive报文后对等体建立成功，同时后续定期发送keepalive报文用于保持连接。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）BGP对等体关系建立好了，就可以通过BGP update 报文通告路由到对等体。收到对方的keepalive报文后对等体建立成功，同时后续定期发送keepalive报文用于保持连接。&lt;/font&gt;
&lt;img src=&#34;https://example.com/img/bgp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3bgp的报文类型&#34;&gt;3、bgp的报文类型
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://example.com/img/bgp2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;4bgp状态变化&#34;&gt;4、bgp状态变化
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）Idle状态是BGP初始状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Idle状态下，BGP拒绝对等体发送的连接请求。只有在收到本设备的Start事件后，BGP才开始尝试和其它BGP对等体进行TCP连接，并转至Connect状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;Start事件是由一个操作者配置一个BGP过程，或者重置一个已经存在的过程或者路由器软件重置BGP过程引起的。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;任何状态中收到Notification报文或TCP拆链通知等Error事件后，BGP都会转至Idle状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）Connect状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Connect状态下，BGP启动连接重传定时器（Connect Retry），等待TCP完成连接。&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接成功，那么BGP向对等体发送Open报文，并转至OpenSent状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接失败，那么BGP转至Active状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP继续尝试和其它BGP对等体进行TCP连接，停留在Connect状态。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（3）Active状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;在Active状态下，BGP总是在试图建立TCP连接。&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接成功，那么BGP向对等体发送Open报文，关闭连接重传定时器，并转至OpenSent状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果TCP连接失败，那么BGP停留在Active状态。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP转至Connect状态。&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（4）Opensent状态、openconfirm状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;TCP三次握手建立成功后，发送open报文建立对等体关系，此时的状态为 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;opensent状态，当收到对端回应的open报文，并且参数检查无误，在发送keepalive报文后进入openconfirm状态。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（5）established状态&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;进入openconfirm状态后，收到对端的keepalive报文后进入established状态。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;5bgp的路由生成&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;5、bgp的路由生成&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP路由是通过BGP命令通告而成的，而通告BGP路由的方法有两种：network和Import。 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（1）network方式：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;使用network命令可以将当前设备路由表中的路由（非BGP）发布到BGP路由表中并通告给邻居，和OSPF中使用network命令的方式大同小异，只不过在BGP宣告时，只需要宣告网段+掩码数即可，如：network 12.12.0.0 16。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;（2）Import方式：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;使用Import命令可以将该路由器学到的路由信息重分发到BGP路由表中，是BGP宣告路由的一种方式，可以引入BGP的路由包括：直连路由、静态路由及动态路由协议学到的路由。其命令格式与在RIP中重分发OSPF差不多。&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;6bgp通告原则&#34;&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;6、BGP通告原则&lt;/font&gt;
&lt;/h4&gt;&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP设备会将最优路由加入BGP路由表，形成BGP路由。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;BGP设备与对等体建立邻居关系后，采用以下交互原则： &lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;从IBGP对等体获得的BGP路由，BGP设备只传递给它的EBGP对等体。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;从EBGP对等体获得的BGP路由，BGP设备传递给它所有EBGP和IBGP对等体（对等体是IBGP只能传递一跳，对等体是EBGP则不限制）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;当存在多条到达同一目的地址的有效路由时，BGP设备只将最优路由发布给对等体&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;路由更新时，BGP设备只发送更新的BGP路由&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有对等体发送的路由，BGP设备都会接收&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有EBGP对等体在传递过程中下一跳改变&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;所有IBGP对等体在传递过程中下一跳不变（需要特别注意）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;默认EBGP传递时 TTL值为1（需要特别注意）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font style=&#34;color:rgb(51, 51, 51);&#34;&gt;默认IBGP传递时 TTL值为255&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Https的原理</title>
        <link>https://example.com/p/https%E7%9A%84%E5%8E%9F%E7%90%86/</link>
        <pubDate>Sun, 13 Jul 2025 14:27:57 +0800</pubDate>
        
        <guid>https://example.com/p/https%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
        <description>&lt;p&gt;1.客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的80端口)。&lt;/p&gt;
&lt;p&gt;2.采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书，证书是需要申请的，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书 (当然了是要钱的，安全级别越高价格越贵)。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。&lt;/p&gt;
&lt;p&gt;3.服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。Chrome 浏览器点击地址栏的锁标志再点击证书就可以看到证书详细信息。&lt;br&gt;
4.客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。就像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/similianjie.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;
如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。&lt;/p&gt;
&lt;p&gt;5.客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。&lt;/p&gt;
&lt;p&gt;6.服务器在收到随机码 KEY 之后会使用私钥B将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。&lt;/p&gt;
&lt;p&gt;7.服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。&lt;/p&gt;
&lt;p&gt;8.双方使用对称加密愉快地传输所有数据。
&lt;img src=&#34;https://example.com/img/%e7%a4%ba%e6%84%8f%e5%9b%be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
